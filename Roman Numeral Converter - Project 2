/*Instructions
----------------------------------
Convert the given number into a roman numeral.
All roman numerals answers should be provided in upper-case.
convertToRoman(2) should return the string II.

Passed:convertToRoman(3) should return the string III.
Passed:convertToRoman(4) should return the string IV.
Passed:convertToRoman(5) should return the string V.
Passed:convertToRoman(9) should return the string IX.
Passed:convertToRoman(12) should return the string XII.
Passed:convertToRoman(16) should return the string XVI.
Passed:convertToRoman(29) should return the string XXIX.
Passed:convertToRoman(44) should return the string XLIV.
Passed:convertToRoman(45) should return the string XLV.
Passed:convertToRoman(68) should return the string LXVIII
Passed:convertToRoman(83) should return the string LXXXIII
Passed:convertToRoman(97) should return the string XCVII
Passed:convertToRoman(99) should return the string XCIX
Passed:convertToRoman(400) should return the string CD
Passed:convertToRoman(500) should return the string D
Passed:convertToRoman(501) should return the string DI
Passed:convertToRoman(649) should return the string DCXLIX
Passed:convertToRoman(798) should return the string DCCXCVIII
Passed:convertToRoman(891) should return the string DCCCXCI
Passed:convertToRoman(1000) should return the string M
Passed:convertToRoman(1004) should return the string MIV
Passed:convertToRoman(1006) should return the string MVI
Passed:convertToRoman(1023) should return the string MXXIII
Passed:convertToRoman(2014) should return the string MMXIV
Passed:convertToRoman(3999) should return the string MMMCMXCIX


Starting Code
-----------------------------------
function convertToRoman(num) {
 return num;
}

convertToRoman(36);


Final Code - 1st Solution
------------------------------------*/
function convertToRoman(num) {
  const rNumerals = [1, "I", 4, "IV", 5, "V", 9, "IX", 10, "X", 40, "XL", 50, "L", 90, "XC", 100, "C", 400, "CD", 500, "D", 900, "CM", 1000, "M", 2000, "MM", 3000, "MMM", 4000, "MMMM", 5000, "VÌ…"];
  const rNumeralsTens = [10, "X", 20, "XX", 30, "XXX", 40, "XL", 50, "L", 60, "LX", 70, "LXX", 80, "LXXX", 90, "XC"]
  const romanNumeral = [];
   let v;

while (num > 1) {
  if (rNumerals.includes(num)) {
  romanNumeral.push(rNumerals[rNumerals.indexOf(num)+1]);
  break;
}
for (let i = 0; i < rNumerals.length; i++) {
  if (rNumerals[i] < num || isNaN(rNumerals[i])) {}
  else {v = rNumerals[i-2];
  while (num > v) {
    num = num-v;
    romanNumeral.push(rNumerals[i-1]);
  }
  }
}
if (rNumeralsTens.includes(num)) {
  romanNumeral.push(rNumeralsTens[rNumeralsTens.indexOf(num)+1]);
  break;
}
if (num === 4) {
  romanNumeral.push("IV");
  num = 0;
};
if (num === 5) {
  romanNumeral.push("V");
  num = 0; 
}
if (num === 9) {
  romanNumeral.push("IX");
  num = 0; 
}
}
if (num === 3 || num === 2 || num === 1) {
  while (num > 0) {
    num--;
    romanNumeral.push("I")
  }
}
return romanNumeral.join("")
}
convertToRoman(230);


/*Final Code - 2nd Solution
--------------------------------------------
function convertToRoman(num) {
 const romanNumerals = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"];
 const integers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];
let rNumerals = ""; 
for (let i = 0; i < integers.length; i++) {
  while (num >= integers[i]) {
    num -= integers[i];
    rNumerals += romanNumerals[i] + " ";
  } 
}
return rNumerals;
}
console.log(convertToRoman(3500));
