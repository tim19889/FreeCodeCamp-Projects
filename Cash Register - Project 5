/*Instructions
-----------------------------------
Design a cash register drawer function checkCashRegister() that accepts purchase price as the first argument (price), payment as the second argument (cash), and cash-in-drawer (cid) as the third argument.

cid is a 2D array listing available currency.

The checkCashRegister() function should always return an object with a status key and a change key.

Return {status: "INSUFFICIENT_FUNDS", change: []} if cash-in-drawer is less than the change due, or if you cannot return the exact change.

Return {status: "CLOSED", change: [...]} with cash-in-drawer as the value for the key change if it is equal to the change due.

Otherwise, return {status: "OPEN", change: [...]}, with the change due in coins and bills, sorted in highest to lowest order, as the value of the change key.

Currency Unit	Amount
Penny	$0.01 (PENNY)
Nickel	$0.05 (NICKEL)
Dime	$0.1 (DIME)
Quarter	$0.25 (QUARTER)
Dollar	$1 (ONE)
Five Dollars	$5 (FIVE)
Ten Dollars	$10 (TEN)
Twenty Dollars	$20 (TWENTY)
One-hundred Dollars	$100 (ONE HUNDRED)
See below for an example of a cash-in-drawer array:

[
  ["PENNY", 1.01],
  ["NICKEL", 2.05],
  ["DIME", 3.1],
  ["QUARTER", 4.25],
  ["ONE", 90],
  ["FIVE", 55],
  ["TEN", 20],
  ["TWENTY", 60],
  ["ONE HUNDRED", 100]
]

checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]) should return an object.
Passed:checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]) should return {status: "OPEN", change: [["QUARTER", 0.5]]}.
Passed:checkCashRegister(3.26, 100, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]) should return {status: "OPEN", change: [["TWENTY", 60], ["TEN", 20], ["FIVE", 15], ["ONE", 1], ["QUARTER", 0.5], ["DIME", 0.2], ["PENNY", 0.04]]}.
Passed:checkCashRegister(19.5, 20, [["PENNY", 0.01], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 0], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]) should return {status: "INSUFFICIENT_FUNDS", change: []}.
Passed:checkCashRegister(19.5, 20, [["PENNY", 0.01], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 1], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]) should return {status: "INSUFFICIENT_FUNDS", change: []}.
Passed:checkCashRegister(19.5, 20, [["PENNY", 0.5], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 0], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]) should return {status: "CLOSED", change: [["PENNY", 0.5], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 0], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]}.


Starting Code
-----------------------------------
function checkCashRegister(price, cash, cid) {
  let change;
  return change;
}

checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]);


Final Code
------------------------------------*/

function checkCashRegister(price, cash, cid) {
  let initialChangeDue = (cash - price);
  let changeDue = (cash - price); 
  const cidArr = cid.flat();
  const changeArr = [];
  const changeObj = {status: "OPEN", change: []}
  let totalCid = 0;
  let evenOrUneven = 0; 
  const denominations = 
["PENNY", 0.01, 
"NICKEL", 0.05, 
"DIME", 0.10, 
"QUARTER", 0.25, 
"ONE", 1.00, 
"FIVE", 5.00, 
"TEN", 10.00, 
"TWENTY", 20.00, 
"ONE HUNDRED", 100.00];
  
  //Calculates the total cash in drawer and assigns that number to totalCid. If totalCid is the same as initialChangeDue, returns the object in required format. 
  cid.forEach((element) => {totalCid += element[1]}); 
 if (initialChangeDue === totalCid) {
   changeObj["status"] = "CLOSED";
   changeObj["change"] = cid; 
   return changeObj;
 }
 
//A for loop with conditions to subtract the proper item in denominations from changeDue and cidArr. When a cidArr number becomes 0, that number is removed
//from the denominations array so it won't be used any more. 
//The changeArr array holds all the individual cash amount (dollars, quarters, dimes, etc) due to the customer. This gets added together later. 

  for (let i = 0; i < denominations.length; i++) {

if (typeof(denominations[i]) === "number" && denominations[i] > changeDue + 0.001) {

  changeDue -= denominations[i-2];
  cidArr[i-2] -= denominations[i-2];
  changeArr.push([denominations[i-3], denominations[i-2]]);
  if (cidArr[i-2] <= 0) {
    denominations.splice([i-2], 2) 
  }
i = 0; 
  }
  }
  
  //This for loop adds together all the change due in the proper format required by the tests. ChangeArr then gets assigned to the "change" key of the object that 
  //gets returned. 
  
  for (let i = 0; i < changeArr.length-1; i++) {
    if (changeArr[i][0] === changeArr[i+1][0]) {
changeArr[i][1] += changeArr[i+1][1];
changeArr.splice(i+1,1);
i--;
}
}
   if (changeArr[changeArr.length-1][0] === undefined) {
     changeArr.pop()
   } 
    changeObj["change"] = changeArr;
  
  //Tests if the change due is less than the total cash in drawer, or if the current cash in drawer cannot provide the exact change due. If either of these are true,
  //it returns the required object in the required format.
  
changeArr.forEach((element) => {evenOrUneven += element[1];});

 if (initialChangeDue.toFixed(2) !== evenOrUneven.toFixed(2)) {
   changeObj["status"] = "INSUFFICIENT_FUNDS";
   changeObj["change"] = []; 
   return changeObj;
 }
  return changeObj;
}
checkCashRegister(3.26, 100, [["PENNY", 1.01], 
["NICKEL", 2.05], 
["DIME", 3.1], 
["QUARTER", 4.25], 
["ONE", 90], 
["FIVE", 55], 
["TEN", 20], 
["TWENTY", 60], 
["ONE HUNDRED", 100]]);
